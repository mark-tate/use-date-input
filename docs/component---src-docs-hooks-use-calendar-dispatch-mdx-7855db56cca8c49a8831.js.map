{"version":3,"sources":["webpack:///../src/docs/hooks/useCalendarDispatch.mdx"],"names":["_frontmatter","name","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","props","mdxType","parentName","__position","__code","__scope","Playground","calendarActions","useCalendarDispatch","Calendar","CalendarProvider","dateAdapter","Button","ButtonBar","adapter","dispatch","onClick","type","navigateNext","isMDXComponent"],"mappings":"sTAWaA,G,UAAe,S,wNAENC,EAKQ,UAL9B,IAAsBA,EAMhBC,EAAc,CAClBF,gBAEIG,EAAYC,IACH,SAASC,EAAT,GAGZ,QAFDC,EAEC,EAFDA,WACGC,EACF,8BACD,OAAO,YAACJ,EAAD,eAAeD,EAAiBK,EAAhC,CAAuCD,WAAYA,EAAYE,QAAQ,cAI5E,iBAAQ,CACN,GAAM,uBADR,uBAGA,qBAAG,0BAAYC,WAAW,KAAvB,uBAAH,6FACA,uBAAK,gCAAMA,WAAW,OAAU,CAC5B,UAAa,wBADZ,0UAmBL,iBAAQ,CACN,GAAM,wBADR,wBAGA,yFACA,YAAC,IAAD,CAAYC,WAAY,EAAGC,OAAQ,maAAoaC,SAAO,GAC5cL,QACAH,kBACAS,eACAC,oBACAC,wBACAC,aACAC,qBACAC,gBACAC,WACAC,eAV4c,gBAW5chB,IAX4c,EAY5cJ,eAZ4c,GAa3cQ,QAAQ,eACR,WAeC,OAAO,YAAC,IAAD,CAAkBa,QAASH,IAAaV,QAAQ,oBACnD,aAfY,WAAM,IAElBc,EACEP,cADFO,SAOF,OAAO,YAAC,IAAD,CAAWd,QAAQ,aACpB,YAAC,IAAD,CAAQe,QALM,kBAAMD,EAAS,CACjCE,KAAMV,IAAgBW,gBAIYjB,QAAQ,UAAtC,iBAKJ,CAASA,QAAQ,YACjB,YAAC,IAAD,CAAUA,QAAQ,iBAI1B,iBAAQ,CACN,GAAM,wBADR,wBAGA,8GACA,YAAC,IAAD,CAAYE,WAAY,EAAGC,OAAQ,kYAAmYC,SAAO,GAC3aL,QACAH,kBACAS,eACAC,oBACAC,wBACAC,aACAC,qBACAC,gBACAC,WACAC,eAV2a,gBAW3ahB,IAX2a,EAY3aJ,eAZ2a,GAa1aQ,QAAQ,eACR,WAcC,OAAO,YAAC,IAAD,CAAkBa,QAASH,IAAaV,QAAQ,oBACnD,aAdJ,WAAmB,IAEfiB,EACEV,cADFU,aAKF,OAAO,YAAC,IAAD,CAAWjB,QAAQ,aACpB,YAAC,IAAD,CAAQe,QAHM,kBAAME,KAGUjB,QAAQ,UAAtC,iBAMJ,CAASA,QAAQ,YACjB,YAAC,IAAD,CAAUA,QAAQ,uB,sNAQ9BH,EAAWqB,gBAAiB","file":"component---src-docs-hooks-use-calendar-dispatch-mdx-7855db56cca8c49a8831.js","sourcesContent":["import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsx mdx */\n\nimport DefaultLayout from \"/Users/mark/Documents/use-date-input-patch/node_modules/gatsby-theme-docz/src/base/Layout.js\";\nimport { Playground } from 'docz';\nimport { calendarActions, useCalendarDispatch, Calendar, CalendarProvider } from '@use-date-input/core';\nimport { adapter as dateAdapter } from \"@use-date-input/date-fns-adapter\";\nimport { Button } from \"../../gatsby-theme-docz/components/Button\";\nimport { ButtonBar } from \"../../gatsby-theme-docz/components/ButtonBar\";\nexport const _frontmatter = {};\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n  return <div {...props} />;\n};\n\nconst MyPanel = makeShortcode(\"MyPanel\");\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n\n    <h1 {...{\n      \"id\": \"usecalendardispatch\"\n    }}>{`useCalendarDispatch`}</h1>\n    <p><inlineCode parentName=\"p\">{`useCalendarDispatch`}</inlineCode>{` returns the configured reducers dispatcher, along with a helper API for common actions. `}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`const {\n    dispatch,\n    mouseClickOutside,\n    navigateNext,\n    navigatePrevious,\n    selectDate,\n    setAnimating,\n    setEnableKeyboardNavigation,\n    setKeyboardCursor,\n    setMouseCursor,\n    setEndDate,\n    setStartDate,\n    setOpen,\n    setKeyPress,\n    setVisibleFromDate\n} = useCalendarDispatch();\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"using-the-dispatcher\"\n    }}>{`Using the dispatcher`}</h2>\n    <p>{`Using the dispatcher we can dispatch any action to the reducers.`}</p>\n    <Playground __position={0} __code={'() => {\\n  const MyPanel = () => {\\n    const { dispatch } = useCalendarDispatch()\\n    const handleClick = () => dispatch({ type: calendarActions.navigateNext })\\n    return (\\n      <ButtonBar>\\n        <Button onClick={handleClick}>NEXT MONTH</Button>\\n      </ButtonBar>\\n    )\\n  }\\n  return (\\n    <CalendarProvider adapter={dateAdapter}>\\n      <MyPanel />\\n      <Calendar />\\n    </CalendarProvider>\\n  )\\n}'} __scope={{\n      props,\n      DefaultLayout,\n      Playground,\n      calendarActions,\n      useCalendarDispatch,\n      Calendar,\n      CalendarProvider,\n      dateAdapter,\n      Button,\n      ButtonBar,\n      DefaultLayout,\n      _frontmatter\n    }} mdxType=\"Playground\">\n      {() => {\n        const MyPanel = () => {\n          const {\n            dispatch\n          } = useCalendarDispatch();\n\n          const handleClick = () => dispatch({\n            type: calendarActions.navigateNext\n          });\n\n          return <ButtonBar mdxType=\"ButtonBar\">\n                <Button onClick={handleClick} mdxType=\"Button\">NEXT MONTH</Button>\n            </ButtonBar>;\n        };\n\n        return <CalendarProvider adapter={dateAdapter} mdxType=\"CalendarProvider\"> \n            <MyPanel mdxType=\"MyPanel\" />\n            <Calendar mdxType=\"Calendar\" />\n        </CalendarProvider>;\n      }}\n    </Playground>\n    <h2 {...{\n      \"id\": \"using-the-helper-api\"\n    }}>{`Using the helper API`}</h2>\n    <p>{`Using the dispatcher we can dispatch the most common actions, through helper methods.`}</p>\n    <Playground __position={1} __code={'() => {\\n  function MyPanel() {\\n    const { navigateNext } = useCalendarDispatch()\\n    const handleClick = () => navigateNext()\\n    return (\\n      <ButtonBar>\\n        <Button onClick={handleClick}>NEXT MONTH</Button>\\n      </ButtonBar>\\n    )\\n  }\\n  return (\\n    <CalendarProvider adapter={dateAdapter}>\\n      <MyPanel />\\n      <Calendar />\\n    </CalendarProvider>\\n  )\\n}'} __scope={{\n      props,\n      DefaultLayout,\n      Playground,\n      calendarActions,\n      useCalendarDispatch,\n      Calendar,\n      CalendarProvider,\n      dateAdapter,\n      Button,\n      ButtonBar,\n      DefaultLayout,\n      _frontmatter\n    }} mdxType=\"Playground\">\n      {() => {\n        function MyPanel() {\n          const {\n            navigateNext\n          } = useCalendarDispatch();\n\n          const handleClick = () => navigateNext();\n\n          return <ButtonBar mdxType=\"ButtonBar\">\n                <Button onClick={handleClick} mdxType=\"Button\">NEXT MONTH</Button>\n            </ButtonBar>;\n        }\n\n        ;\n        return <CalendarProvider adapter={dateAdapter} mdxType=\"CalendarProvider\"> \n            <MyPanel mdxType=\"MyPanel\" />\n            <Calendar mdxType=\"Calendar\" />\n        </CalendarProvider>;\n      }}\n    </Playground>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"sourceRoot":""}