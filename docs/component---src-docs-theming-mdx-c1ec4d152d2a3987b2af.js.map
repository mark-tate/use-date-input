{"version":3,"sources":["webpack:///../src/docs/theming.mdx"],"names":["_frontmatter","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","props","mdxType","parentName","__position","__code","__scope","useDocs","Link","Playground","styled","Day","Calendar","getDay","eachDayOfInterval","dateAdapter","sampleTheme","useMediaQuery","useTheme","theme","numOfColumns","breakpoints","down","adapter","numOfVisibleMonths","style","padding","background","isMDXComponent"],"mappings":"6WAgBaA,G,UAAe,S,sMAC5B,IAAMC,EAAc,CAClBD,gBAEIE,EAAYC,IACH,SAASC,EAAT,GAGZ,QAFDC,EAEC,EAFDA,WACGC,EACF,8BACD,OAAO,YAACJ,EAAD,eAAeD,EAAiBK,EAAhC,CAAuCD,WAAYA,EAAYE,QAAQ,cAI5E,iBAAQ,CACN,GAAM,WADR,WAGA,0DAAyC,0BAAYC,WAAW,KAAvB,kBAAzC,6DACA,gCAAe,0BAAYA,WAAW,KAAvB,kBAAf,wHACuB,0BAAYA,WAAW,KAAvB,kBADvB,aAEA,kCAAiB,0BAAYA,WAAW,KAAvB,SAAjB,qCACA,YAAC,IAAD,CAAYC,WAAY,EAAGC,OAAQ,qTAAwTC,SAAO,GAChWL,QACAH,kBACAS,YACAC,SACAC,eACAC,WACAC,QACAC,aACAC,WACAC,sBACAC,gBACAC,gBACAC,kBACAC,cAdgW,gBAehWpB,IAfgW,EAgBhWH,eAhBgW,GAiB/VO,QAAQ,eACR,WACC,IAAMiB,EAAQD,cAERE,EADoBH,IAAcE,EAAME,YAAYC,KAAK,OACtB,EAAI,EAC7C,OAAO,YAAC,IAAD,CAAUC,QAASR,IAAaK,aAAcA,EAAcI,mBAAoBJ,EAAclB,QAAQ,gBAGjH,+CAA8B,0BAAYC,WAAW,KAAvB,SAA9B,SACA,YAAC,IAAD,CAAYC,WAAY,EAAGC,OAAQ,gVAAmVC,SAAO,GAC3XL,QACAH,kBACAS,YACAC,SACAC,eACAC,WACAC,QACAC,aACAC,WACAC,sBACAC,gBACAC,gBACAC,kBACAC,cAd2X,gBAe3XpB,IAf2X,EAgB3XH,eAhB2X,GAiB1X8B,MAAO,CACRC,QAAS,EACTC,WAAY,QACXzB,QAAQ,eACR,WACC,IAAMiB,EAAQD,cAERE,EADoBH,IAAcE,EAAME,YAAYC,KAAK,OACtB,EAAI,EAC7C,OAAO,YAAC,IAAD,CAAUC,QAASR,IAAaK,aAAcA,EAAcI,mBAAoBJ,EAAcD,MAAOH,IAAad,QAAQ,gBAGrI,iBAAQ,CACN,GAAM,yBADR,yBAGA,mCAAkB,6BAAGC,WAAW,KAAQ,CACpC,KAAQ,wCADM,qBAAlB,oBAEmD,0BAAYA,WAAW,KAAvB,kBAFnD,6DAIA,uGAAsF,0BAAYA,WAAW,KAAvB,SAAtF,YACA,uBAAK,gCAAMA,WAAW,OAAU,CAC5B,UAAa,wBADZ,+sBAmCL,iCAAgB,6BAAGA,WAAW,KAAQ,CAClC,KAAQ,mFADI,kBAAhB,yCAGA,iCAAgB,0BAAYA,WAAW,KAAvB,SAAhB,wBAA0F,0BAAYA,WAAW,KAAvB,kCAA1F,2EACa,0BAAYA,WAAW,KAAvB,YADb,W,oMAMJJ,EAAW6B,gBAAiB","file":"component---src-docs-theming-mdx-c1ec4d152d2a3987b2af.js","sourcesContent":["import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsx mdx */\n\nimport DefaultLayout from \"/Users/mark/Documents/use-date-input-patch/node_modules/gatsby-theme-docz/src/base/Layout.js\";\nimport { useDocs, Link, Playground } from 'docz';\nimport styled from \"styled-components\";\nimport { Day } from \"@use-date-input/core\";\nimport { Calendar } from \"@use-date-input/core\";\nimport getDay from \"date-fns/getDay\";\nimport eachDayOfInterval from \"date-fns/eachDayOfInterval\";\nimport { dateAdapter } from \"../gatsby-theme-docz/createDate\";\nimport sampleTheme from \"../../stories/sampleTheme\";\nimport useMediaQuery from \"@material-ui/core/useMediaQuery/useMediaQuery\";\nimport { useTheme } from \"@material-ui/core/styles\";\nexport const _frontmatter = {};\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n\n    <h1 {...{\n      \"id\": \"theming\"\n    }}>{`Theming`}</h1>\n    <p>{`Your theme defines your brand, so `}<inlineCode parentName=\"p\">{`use-date-input`}</inlineCode>{` components are naked, with just minimal layout styles.  `}</p>\n    <p>{`Instead `}<inlineCode parentName=\"p\">{`use-date-input`}</inlineCode>{` provides a comphrensive approach to theming, enabling you to replace, either the style or\nthe component, for every `}<inlineCode parentName=\"p\">{`use-date-input`}</inlineCode>{` element.`}</p>\n    <p>{`Using the `}<inlineCode parentName=\"p\">{`theme`}</inlineCode>{` prop, go from the default styles`}</p>\n    <Playground __position={0} __code={'() => {\\n  const theme = useTheme()\\n  const isSmallBreakpoint = useMediaQuery(theme.breakpoints.down(\\'sm\\'))\\n  const numOfColumns = isSmallBreakpoint ? 1 : 2\\n  return (\\n    <Calendar\\n      adapter={dateAdapter}\\n      numOfColumns={numOfColumns}\\n      numOfVisibleMonths={numOfColumns}\\n    />\\n  )\\n}'} __scope={{\n      props,\n      DefaultLayout,\n      useDocs,\n      Link,\n      Playground,\n      styled,\n      Day,\n      Calendar,\n      getDay,\n      eachDayOfInterval,\n      dateAdapter,\n      sampleTheme,\n      useMediaQuery,\n      useTheme,\n      DefaultLayout,\n      _frontmatter\n    }} mdxType=\"Playground\">\n      {() => {\n        const theme = useTheme();\n        const isSmallBreakpoint = useMediaQuery(theme.breakpoints.down(\"sm\"));\n        const numOfColumns = isSmallBreakpoint ? 1 : 2;\n        return <Calendar adapter={dateAdapter} numOfColumns={numOfColumns} numOfVisibleMonths={numOfColumns} mdxType=\"Calendar\" />;\n      }}\n    </Playground>\n    <p>{`to this, with just one `}<inlineCode parentName=\"p\">{`theme`}</inlineCode>{` prop`}</p>\n    <Playground __position={1} __code={'() => {\\n  const theme = useTheme()\\n  const isSmallBreakpoint = useMediaQuery(theme.breakpoints.down(\\'sm\\'))\\n  const numOfColumns = isSmallBreakpoint ? 1 : 2\\n  return (\\n    <Calendar\\n      adapter={dateAdapter}\\n      numOfColumns={numOfColumns}\\n      numOfVisibleMonths={numOfColumns}\\n      theme={sampleTheme}\\n    />\\n  )\\n}'} __scope={{\n      props,\n      DefaultLayout,\n      useDocs,\n      Link,\n      Playground,\n      styled,\n      Day,\n      Calendar,\n      getDay,\n      eachDayOfInterval,\n      dateAdapter,\n      sampleTheme,\n      useMediaQuery,\n      useTheme,\n      DefaultLayout,\n      _frontmatter\n    }} style={{\n      padding: 0,\n      background: 'none'\n    }} mdxType=\"Playground\">\n      {() => {\n        const theme = useTheme();\n        const isSmallBreakpoint = useMediaQuery(theme.breakpoints.down(\"sm\"));\n        const numOfColumns = isSmallBreakpoint ? 1 : 2;\n        return <Calendar adapter={dateAdapter} numOfColumns={numOfColumns} numOfVisibleMonths={numOfColumns} theme={sampleTheme} mdxType=\"Calendar\" />;\n      }}\n    </Playground>\n    <h2 {...{\n      \"id\": \"create-your-own-theme\"\n    }}>{`Create Your Own Theme`}</h2>\n    <p>{`Built upon `}<a parentName=\"p\" {...{\n        \"href\": \"%22https://styled-components.com%22\"\n      }}>{`styled-components`}</a>{` each element of `}<inlineCode parentName=\"p\">{`use-date-input`}</inlineCode>{` is\nthemable by overriding/etending the default style.  `}</p>\n    <p>{`If you want to style the default components then create a new theme, using the `}<inlineCode parentName=\"p\">{`theme`}</inlineCode>{` prop.  `}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`// import { Calendar } from \"@use-date-input/core\";\n// import { adapter as dateAdapter } from \"@use-date-input/date-fns-adapter\";\n\nconst yourTheme = {\n    AnimatedGroup: { /* Overidden component style */ },,\n    AnimatedMonthGroup: {},\n    Day: {},\n    DayOfWeek: {},\n    Header: {},\n    MonthCell: {},\n    MonthGroup: {},\n    MonthTitle: {},\n    Month: {},\n    MonthHeader: {},\n    NextButton: {},\n    PreviousButton: {},\n    Root: {},\n    YearTitle: {},\n    Week: {},\n    WeekHeader: {},\n    WeekRow: {},\n};\n\nfunction ThemedCalendar(props) {\n    return (\n        <Calendar\n            adapter={dateAdapter}\n            theme={yourTheme}\n            {...props}\n        />\n    );\n}\n`}</code></pre>\n    <p>{`Refer to `}<a parentName=\"p\" {...{\n        \"href\": \"https://github.com/mark-tate/use-date-input/blob/master/stories/sampleTheme.js\"\n      }}>{`sampleTheme.js`}</a>{` from the repo for a further example.`}</p>\n    <p>{`If using `}<inlineCode parentName=\"p\">{`input`}</inlineCode>{` components with the `}<inlineCode parentName=\"p\">{`useDateInput/useDateRangeInput`}</inlineCode>{` hooks, then simply style the elements yourself, before\ncomposing with `}<inlineCode parentName=\"p\">{`Calendar`}</inlineCode>{`.`}</p>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"sourceRoot":""}