{"version":3,"sources":["webpack:///../src/docs/hooks/useDateInput.mdx"],"names":["_frontmatter","makeShortcode","name","props","console","warn","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","mdxType","parentName","__position","__code","__scope","useCallback","useRef","useState","Playground","Props","useDateInput","Popper","dateAdapter","parse","isValid","date","setDate","actions","value","Date","Calendar","CalendarProvider","getCalendarProviderProps","getInputProps","getPopperProps","onChange","event","target","log","adapter","onCalendarChange","dateAPI","current","format","placement","style","background","padding","isMDXComponent"],"mappings":"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","file":"component---src-docs-hooks-use-date-input-mdx-94e0d5f38582036ac3f3.js","sourcesContent":["import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsx mdx */\n\nimport DefaultLayout from \"/Users/mark/Documents/use-date-input-patch/node_modules/gatsby-theme-docz/src/base/Layout.js\";\nimport { useCallback, useRef, useState } from 'react';\nimport { Playground, Props } from 'docz';\nimport { useDateInput } from '@use-date-input/core';\nimport { Popper } from '@use-date-input/popper';\nimport { adapter as dateAdapter } from '@use-date-input/date-fns-adapter';\nimport { parse, isValid } from 'date-fns';\nexport const _frontmatter = {};\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n  return <div {...props} />;\n};\n\nconst CalendarProvider = makeShortcode(\"CalendarProvider\");\nconst Calendar = makeShortcode(\"Calendar\");\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n\n    <h1 {...{\n      \"id\": \"usedateinput\"\n    }}>{`useDateInput`}</h1>\n    <p><inlineCode parentName=\"p\">{`useDateInput`}</inlineCode>{` is a hook which will provide the props required to compose together a `}<inlineCode parentName=\"p\">{`Calendar`}</inlineCode>{`\nwith an `}<inlineCode parentName=\"p\">{`input`}</inlineCode>{` component of your choice.`}</p>\n    <p>{`You could  use an HTML `}<inlineCode parentName=\"p\">{`input`}</inlineCode>{`, or an `}<inlineCode parentName=\"p\">{`Input`}</inlineCode>{` or `}<inlineCode parentName=\"p\">{`Formfield`}</inlineCode>{` from your favourite UI framework, or even your own component.`}</p>\n    <p>{`A simple example of use is`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`const {\n    Calendar,\n    CalendarProvider,\n    getCalendarProviderProps,\n    getInputProps,\n    getPopperProps,\n} = useDateInput();\n`}</code></pre>\n    <ul>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`Calendar`}</inlineCode>{` is the calendar component.`}</li>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`CalendarProvider`}</inlineCode>{` is the context which wires all the UI components together, you can use it in your own components\nto manage state`}</li>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`getCalendarProviderProps`}</inlineCode>{` is a callback which provides the props for `}<inlineCode parentName=\"li\">{`CalendarProvider`}</inlineCode></li>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`getInputProps`}</inlineCode>{` is a callback which provides the props for your Input UI Element.`}</li>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`getPopperProps`}</inlineCode>{` is an callback which provides the props for any Popper UI Element.  `}</li>\n    </ul>\n    <p>{`Popper's are a portal which are only needed if you are open the Calendar from another component.`}<br parentName=\"p\"></br>{`\n`}{`ie. an Input when clicked display the Calendar in a portal, which overlays the rest of the page.  `}</p>\n    <p>{`When your `}<inlineCode parentName=\"p\">{`input`}</inlineCode>{` and `}<inlineCode parentName=\"p\">{`Calendar`}</inlineCode>{` are composed together by `}<inlineCode parentName=\"p\">{`useDateInput`}</inlineCode>{` it should look like this`}</p>\n    <h2 {...{\n      \"id\": \"example\"\n    }}>{`Example`}</h2>\n    <Playground __position={0} __code={'() => {\\n  const [date, setDate] = useState(\\'\\')\\n  const actions = useRef()\\n  const handleInputChange = event => {\\n    const { value } = event.target\\n    console.log(\\'input changed to\\', value)\\n    setDate(event.target.value)\\n  }\\n  const handleCalendarChange = value => {\\n    console.log(\\'calendar changed selected date\\', value)\\n    const { dateAPI } = actions.current\\n    setDate(dateAPI.format(value, \\'dd/MM/yyyy\\'))\\n  }\\n  const {\\n    Calendar,\\n    CalendarProvider,\\n    getCalendarProviderProps,\\n    getInputProps,\\n    getPopperProps,\\n  } = useDateInput({\\n    actions,\\n    parse: value => parse(value, \\'dd/MM/yyyy\\', new Date()),\\n  })\\n  return (\\n    <>\\n      <input\\n        {...getInputProps({ onChange: handleInputChange })}\\n        value={date}\\n      />\\n      <CalendarProvider\\n        {...getCalendarProviderProps({\\n          adapter: dateAdapter,\\n          onCalendarChange: handleCalendarChange,\\n        })}\\n      >\\n        <Popper {...getPopperProps({ placement: \\'bottom-start\\' })}>\\n          <div style={{ background: \\'#1FB6FF\\', padding: \\'10px\\' }}>\\n            <Calendar />\\n          </div>\\n        </Popper>\\n      </CalendarProvider>\\n    </>\\n  )\\n}'} __scope={{\n      props,\n      DefaultLayout,\n      useCallback,\n      useRef,\n      useState,\n      Playground,\n      Props,\n      useDateInput,\n      Popper,\n      dateAdapter,\n      parse,\n      isValid,\n      DefaultLayout,\n      _frontmatter\n    }} mdxType=\"Playground\">\n  {() => {\n        const [date, setDate] = useState('');\n        const actions = useRef();\n\n        const handleInputChange = event => {\n          const {\n            value\n          } = event.target;\n          console.log('input changed to', value);\n          setDate(event.target.value);\n        };\n\n        const handleCalendarChange = value => {\n          console.log('calendar changed selected date', value);\n          const {\n            dateAPI\n          } = actions.current;\n          setDate(dateAPI.format(value, 'dd/MM/yyyy'));\n        };\n\n        const {\n          Calendar,\n          CalendarProvider,\n          getCalendarProviderProps,\n          getInputProps,\n          getPopperProps\n        } = useDateInput({\n          actions,\n          parse: value => parse(value, 'dd/MM/yyyy', new Date())\n        });\n        return <>\n            <input {...getInputProps({\n            onChange: handleInputChange\n          })} value={date} />\n            <CalendarProvider {...getCalendarProviderProps({\n            adapter: dateAdapter,\n            onCalendarChange: handleCalendarChange\n          })} mdxType=\"CalendarProvider\">\n                <Popper {...getPopperProps({\n              placement: \"bottom-start\"\n            })} mdxType=\"Popper\">\n                    <div style={{\n                background: \"#1FB6FF\",\n                padding: \"10px\"\n              }}>\n                        <Calendar mdxType=\"Calendar\" />\n                    </div>\n                </Popper>\n            </CalendarProvider>\n        </>;\n      }}\n    </Playground>\n    <h2 {...{\n      \"id\": \"actions\"\n    }}>{`Actions`}</h2>\n    <p><inlineCode parentName=\"p\">{`useDateInput`}</inlineCode>{` provides an imperative API for the controlled state, use-case.`}</p>\n    <p>{`Pass a ref to `}<inlineCode parentName=\"p\">{`useDateInput`}</inlineCode>{` and it will be assigned an impertive API of state and helpers.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`const {\n    Calendar,\n    CalendarProvider,\n    getCalendarProviderProps,\n    getInputProps,\n    getPopperProps,\n} = useDateInput({\n    actions\n});\n`}</code></pre>\n    <p>{`The imperative API takes the form.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`actions.current = {\n    createDate, \n    dispatch,\n    mouseClickOutside,\n    navigateNext,\n    navigatePrevious,\n    selectDate,\n    setAnimating,\n    setEnableKeyboardNavigation,\n    setKeyboardCursor,\n    setMouseCursor,\n    setEndDate,\n    setStartDate,\n    setOpen,\n    setKeyPress,\n    setVisibleFromDate\n}\n`}</code></pre>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"sourceRoot":""}