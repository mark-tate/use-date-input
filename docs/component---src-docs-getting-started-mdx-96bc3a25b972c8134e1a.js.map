{"version":3,"sources":["webpack:///../src/docs/getting-started.mdx"],"names":["_frontmatter","name","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","props","mdxType","parentName","href","target","__position","__code","__scope","useRef","useState","Playground","Calendar","useDateInput","dateAdapter","parse","adapter","onCalendarChange","newSelectedDate","console","log","date","setDate","actions","value","Date","CalendarProvider","getCalendarProviderProps","getInputProps","onChange","event","dateAPI","current","format","isMDXComponent"],"mappings":"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","file":"component---src-docs-getting-started-mdx-96bc3a25b972c8134e1a.js","sourcesContent":["import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsx mdx */\n\nimport DefaultLayout from \"/Users/mark/Documents/use-date-input-patch/node_modules/gatsby-theme-docz/src/base/Layout.js\";\nimport { useRef, useState } from 'react';\nimport { Playground } from \"docz\";\nimport { Calendar, useDateInput } from '@use-date-input/core';\nimport { dateAdapter } from \"../gatsby-theme-docz/createDate\";\nimport { parse } from 'date-fns';\nexport const _frontmatter = {};\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n  return <div {...props} />;\n};\n\nconst CalendarProvider = makeShortcode(\"CalendarProvider\");\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n\n    <h2 {...{\n      \"id\": \"getting-started\"\n    }}>{`Getting Started`}</h2>\n    <p>{`A Date Picker can consist of an `}<inlineCode parentName=\"p\">{`input`}</inlineCode>{` and a `}<inlineCode parentName=\"p\">{`Calendar`}</inlineCode>{` or just a `}<inlineCode parentName=\"p\">{`Calendar`}</inlineCode>{`.`}<br parentName=\"p\"></br>{`\n`}<inlineCode parentName=\"p\">{`use-date-input`}</inlineCode>{` uses an adapter API so that it can be used with any date framework.`}<br parentName=\"p\"></br>{`\n`}<inlineCode parentName=\"p\">{`use-date-input`}</inlineCode>{` provides pre-made adapters for the most popular frameworks or you can write your own.`}</p>\n    <ul>\n      <li parentName=\"ul\"><a href=\"https://date-fns.org/\" target=\"__blank__\">date-fns</a></li>\n      <li parentName=\"ul\"><a href=\"https://day.js.org/\" target=\"__blank__\">dayjs</a></li>\n      <li parentName=\"ul\"><a href=\"https://moment.github.io/luxon/\" target=\"__blank__\">luxon</a></li>\n      <li parentName=\"ul\"><a href=\"https://momentjs.com/\" target=\"__blank__\">moment</a></li>\n    </ul>\n    <h3 {...{\n      \"id\": \"for-date-fns-users\"\n    }}>{`For date-fns users`}</h3>\n    <pre><code parentName=\"pre\" {...{}}>{`yarn add date-fns \nyarn add @use-date-input/core\nyarn add @use-date-input/date-fns-adapter \nyarn add styled-components \n`}</code></pre>\n    <h3 {...{\n      \"id\": \"for-dayjs-users\"\n    }}>{`For dayjs users`}</h3>\n    <pre><code parentName=\"pre\" {...{}}>{`yarn add dayjs \nyarn add @use-date-input/core\nyarn add @use-date-input/dayjs-adapter \nyarn add styled-components \n`}</code></pre>\n    <h3 {...{\n      \"id\": \"for-luxon-users\"\n    }}>{`For luxon users`}</h3>\n    <pre><code parentName=\"pre\" {...{}}>{`yarn add luxon \nyarn add @use-date-input/core\nyarn add @use-date-input/luxon-adapter \nyarn add styled-components \n`}</code></pre>\n    <h3 {...{\n      \"id\": \"for-moment-users\"\n    }}>{`For moment users`}</h3>\n    <pre><code parentName=\"pre\" {...{}}>{`yarn add moment \nyarn add @use-date-input/core\nyarn add @use-date-input/moment-adapter \nyarn add styled-components \n`}</code></pre>\n    <h2 {...{\n      \"id\": \"calendar-example\"\n    }}>{`Calendar Example`}</h2>\n    <p>{`A basic example of the `}<inlineCode parentName=\"p\">{`Calendar`}</inlineCode>{` component.`}</p>\n    <Playground __position={0} __code={'() => {\\n  // import { Calendar } from \\'@use-date-input/core\\';\\n  // import { adapter as dateAdapter } from \\'@use-date-input/date-fns-adapter\\';\\n  function handleCalendarChange(newSelectedDate) {\\n    console.log(\\'calendar changed selected date\\', newSelectedDate)\\n  }\\n  return (\\n    <Calendar adapter={dateAdapter} onCalendarChange={handleCalendarChange} />\\n  )\\n}'} __scope={{\n      props,\n      DefaultLayout,\n      useRef,\n      useState,\n      Playground,\n      Calendar,\n      useDateInput,\n      dateAdapter,\n      parse,\n      DefaultLayout,\n      _frontmatter\n    }} mdxType=\"Playground\">\n      {() => {\n        // import { Calendar } from '@use-date-input/core';\n        // import { adapter as dateAdapter } from '@use-date-input/date-fns-adapter';\n        function handleCalendarChange(newSelectedDate) {\n          console.log('calendar changed selected date', newSelectedDate);\n        }\n\n        return <Calendar adapter={dateAdapter} onCalendarChange={handleCalendarChange} mdxType=\"Calendar\" />;\n      }}\n    </Playground>\n    <h2 {...{\n      \"id\": \"input--calendar-example\"\n    }}>{`Input & Calendar Example`}</h2>\n    <p>{`A basic example of the `}<inlineCode parentName=\"p\">{`useDateInput`}</inlineCode>{` hook, linking an HTML `}<inlineCode parentName=\"p\">{`input`}</inlineCode>{` and the `}<inlineCode parentName=\"p\">{`Calendar`}</inlineCode>{` component.`}</p>\n    <Playground __position={1} __code={'() => {\\n  // import { useRef, useState } from \\'react\\';\\n  // import { useDateInput } from \\\"@use-date-input/core\\\";\\n  // import { adapter as dateAdapter } from \\\"@use-date-input/date-fns-adapter\\\";\\n  // import { parse } from \\'date-fns\\';\\n  const defaultParseDate = value => parse(value, \\'dd/MM/yyyy\\', new Date())\\n  const [date, setDate] = useState(\\'\\')\\n  const actions = useRef()\\n  function handleInputChange(event) {\\n    const { value } = event.target\\n    console.log(\\'input changed to\\', value)\\n    setDate(event.target.value)\\n  }\\n  function handleCalendarChange(newSelectedDate) {\\n    console.log(\\'calendar changed selected date\\', newSelectedDate)\\n    const { dateAPI } = actions.current\\n    setDate(dateAPI.format(newSelectedDate, \\'dd/MM/yyyy\\'))\\n  }\\n  const {\\n    Calendar,\\n    CalendarProvider,\\n    getCalendarProviderProps,\\n    getInputProps,\\n  } = useDateInput({\\n    actions,\\n    parse: defaultParseDate,\\n  })\\n  return (\\n    <>\\n      <input\\n        {...getInputProps({ onChange: handleInputChange })}\\n        value={date}\\n      />\\n      <CalendarProvider\\n        {...getCalendarProviderProps({\\n          adapter: dateAdapter,\\n          onCalendarChange: handleCalendarChange,\\n        })}\\n      >\\n        <Calendar />\\n      </CalendarProvider>\\n    </>\\n  )\\n}'} __scope={{\n      props,\n      DefaultLayout,\n      useRef,\n      useState,\n      Playground,\n      Calendar,\n      useDateInput,\n      dateAdapter,\n      parse,\n      DefaultLayout,\n      _frontmatter\n    }} mdxType=\"Playground\">\n      {() => {\n        // import { useRef, useState } from 'react';\n        // import { useDateInput } from \"@use-date-input/core\";\n        // import { adapter as dateAdapter } from \"@use-date-input/date-fns-adapter\";\n        // import { parse } from 'date-fns';\n        const defaultParseDate = value => parse(value, 'dd/MM/yyyy', new Date());\n\n        const [date, setDate] = useState('');\n        const actions = useRef();\n\n        function handleInputChange(event) {\n          const {\n            value\n          } = event.target;\n          console.log('input changed to', value);\n          setDate(event.target.value);\n        }\n\n        function handleCalendarChange(newSelectedDate) {\n          console.log('calendar changed selected date', newSelectedDate);\n          const {\n            dateAPI\n          } = actions.current;\n          setDate(dateAPI.format(newSelectedDate, 'dd/MM/yyyy'));\n        }\n\n        const {\n          Calendar,\n          CalendarProvider,\n          getCalendarProviderProps,\n          getInputProps\n        } = useDateInput({\n          actions,\n          parse: defaultParseDate\n        });\n        return <>\n            <input {...getInputProps({\n            onChange: handleInputChange\n          })} value={date} />\n            <CalendarProvider {...getCalendarProviderProps({\n            adapter: dateAdapter,\n            onCalendarChange: handleCalendarChange\n          })} mdxType=\"CalendarProvider\">\n                <Calendar mdxType=\"Calendar\" />\n            </CalendarProvider>\n        </>;\n      }}\n    </Playground>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"sourceRoot":""}