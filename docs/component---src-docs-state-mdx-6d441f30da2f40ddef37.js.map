{"version":3,"sources":["webpack:///../src/docs/state.mdx"],"names":["_frontmatter","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","props","mdxType","parentName","__position","__code","__scope","useRef","useState","useDocs","Link","Playground","styled","calendarActions","calendarReducer","createDateAPI","Calendar","CalendarProvider","Day","useCalendarDispatch","useCalendarState","singleDateReducer","Root","makeStyles","List","ListItem","ListItemText","dateAdapter","getDay","eachDayOfInterval","sampleTheme","adapter","reducers","state","action","dateAPI","type","selectDate","startDate","addWeeks","onStateChange","newState","changes","console","log","storeDate","setStoreDate","actions","allowRange","onCalendarChange","value","rangeStart","current","setEndDate","setStartDate","isSameDay","isMDXComponent"],"mappings":"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","file":"component---src-docs-state-mdx-6d441f30da2f40ddef37.js","sourcesContent":["import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsx mdx */\n\nimport DefaultLayout from \"/Users/mark/Documents/use-date-input-patch/node_modules/gatsby-theme-docz/src/base/Layout.js\";\nimport { useRef, useState } from 'react';\nimport { useDocs, Link, Playground } from 'docz';\nimport styled from \"styled-components\";\nimport { calendarActions, calendarReducer, createDateAPI, Calendar, CalendarProvider, Day, useCalendarDispatch, useCalendarState, singleDateReducer, Root } from \"@use-date-input/core\";\nimport { makeStyles } from '@material-ui/core/styles';\nimport List from '@material-ui/core/List';\nimport ListItem from '@material-ui/core/ListItem';\nimport ListItemText from '@material-ui/core/ListItemText';\nimport { adapter as dateAdapter } from '@use-date-input/date-fns-adapter';\nimport getDay from \"date-fns/getDay\";\nimport eachDayOfInterval from \"date-fns/eachDayOfInterval\";\nimport sampleTheme from \"../../stories/sampleTheme\";\nexport const _frontmatter = {};\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n\n    <h1 {...{\n      \"id\": \"state\"\n    }}>{`State`}</h1>\n    <p><inlineCode parentName=\"p\">{`use-date-input`}</inlineCode>{` comes with a set of default reducers which are composed together to create\nthe state for `}<inlineCode parentName=\"p\">{`useDateInput`}</inlineCode>{`, `}<inlineCode parentName=\"p\">{`useDateRangeInput`}</inlineCode>{` and `}<inlineCode parentName=\"p\">{`Calender`}</inlineCode>{`.`}</p>\n    <p>{`You can override the default state or add additional state, whatever your components need, with the `}<inlineCode parentName=\"p\">{`reducers`}</inlineCode>{` prop.`}<br parentName=\"p\"></br>{`\n`}{`The `}<inlineCode parentName=\"p\">{`reducers`}</inlineCode>{` prop can be provided to either `}<inlineCode parentName=\"p\">{`CalendarProvider`}</inlineCode>{` or `}<inlineCode parentName=\"p\">{`Calendar`}</inlineCode>{`.`}</p>\n    <p>{`In this example we change the selection created by the default reducers, so that it adds 1 week to any date that is selected.`}<br parentName=\"p\"></br>{`\n`}{`Any part of the default state can be modified in this way.`}</p>\n    <Playground __position={0} __code={'() => {\\n  // import { Calendar, calendarReducer, calendarActions, singleDateReducer } from \\\"@use-date-input/core\\\";\\n  // import { adapter as dateAdapter } from \\\"@use-date-input/date-fns-adapter\\\";\\n  function handleStateChange(newState, changes) {\\n    console.log(\\'new state\\', newState.startDate, changes)\\n  }\\n  const myReducer = (state, action, dateAPI) => {\\n    if (action.type === calendarActions.selectDate) {\\n      return { ...state, startDate: dateAPI.addWeeks(state.startDate, 1) }\\n    }\\n    return state\\n  }\\n  return (\\n    <Calendar\\n      adapter={dateAdapter}\\n      reducers={[calendarReducer, singleDateReducer, myReducer]}\\n      onStateChange={handleStateChange}\\n    />\\n  )\\n}'} __scope={{\n      props,\n      DefaultLayout,\n      useRef,\n      useState,\n      useDocs,\n      Link,\n      Playground,\n      styled,\n      calendarActions,\n      calendarReducer,\n      createDateAPI,\n      Calendar,\n      CalendarProvider,\n      Day,\n      useCalendarDispatch,\n      useCalendarState,\n      singleDateReducer,\n      Root,\n      makeStyles,\n      List,\n      ListItem,\n      ListItemText,\n      dateAdapter,\n      getDay,\n      eachDayOfInterval,\n      sampleTheme,\n      DefaultLayout,\n      _frontmatter\n    }} mdxType=\"Playground\">\n      {() => {\n        // import { Calendar, calendarReducer, calendarActions, singleDateReducer } from \"@use-date-input/core\";\n        // import { adapter as dateAdapter } from \"@use-date-input/date-fns-adapter\";\n        function handleStateChange(newState, changes) {\n          console.log('new state', newState.startDate, changes);\n        }\n\n        const myReducer = (state, action, dateAPI) => {\n          if (action.type === calendarActions.selectDate) {\n            return { ...state,\n              startDate: dateAPI.addWeeks(state.startDate, 1)\n            };\n          }\n\n          return state;\n        };\n\n        return <Calendar adapter={dateAdapter} reducers={[calendarReducer, singleDateReducer, myReducer]} onStateChange={handleStateChange} mdxType=\"Calendar\" />;\n      }}\n    </Playground>\n    <h2 {...{\n      \"id\": \"default-reducers\"\n    }}>{`Default Reducers`}</h2>\n    <p>{`A brief description of the default reducers.`}</p>\n    <h3 {...{\n      \"id\": \"calendarreducer\"\n    }}>{`calendarReducer`}</h3>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`import { calendarReducer, calendarActions } from \"@use-date-input/core\";\n`}</code></pre>\n    <p>{`Creates the state for a stand-alone `}<inlineCode parentName=\"p\">{`Calendar`}</inlineCode>{` with no associated input.  `}</p>\n    <p>{`Associated actions :  `}</p>\n    <ul>\n      <li parentName=\"ul\">{`focusDate - Focus a specific date`}</li>\n      <li parentName=\"ul\">{`keyPress - Keyboard action`}</li>\n      <li parentName=\"ul\">{`mouseClickOutside - Mouse clicked outside of Calendar (or allow list)`}</li>\n      <li parentName=\"ul\">{`navigatePrevious - Navigate to the previous month`}</li>\n      <li parentName=\"ul\">{`navigateNext - Navigate to the next month`}</li>\n      <li parentName=\"ul\">{`selectDate - Select a date (emulating keyboard or mouse selection)`}</li>\n      <li parentName=\"ul\">{`setAnimating - Create the transient state of animating between dates (used to prevent interim selection)`}</li>\n      <li parentName=\"ul\">{`setEnableKeyboardNavigation - Enable the navigation of the `}<inlineCode parentName=\"li\">{`Calendar`}</inlineCode>{` cursor with the keyboard controls`}</li>\n      <li parentName=\"ul\">{`setEndDate - Create an end date for a date range (programatically)`}</li>\n      <li parentName=\"ul\">{`setFocusableDate - Enable/Disable focusable dates within the `}<inlineCode parentName=\"li\">{`Calendar`}</inlineCode>{` `}</li>\n      <li parentName=\"ul\">{`setKeyboardCursor - Set the keyboard cursor within the `}<inlineCode parentName=\"li\">{`Calendar`}</inlineCode>{` `}</li>\n      <li parentName=\"ul\">{`setMouseCursor - Set the mouse cursor within the `}<inlineCode parentName=\"li\">{`Calendar`}</inlineCode>{` `}</li>\n      <li parentName=\"ul\">{`setStartDate - Create an start date for a date range (programatically)`}</li>\n      <li parentName=\"ul\">{`setOpen - Open the visible state of the `}<inlineCode parentName=\"li\">{`Calendar`}</inlineCode></li>\n      <li parentName=\"ul\">{`setVisibleFromDate - Set the initial visible month`}</li>\n    </ul>\n    <h3 {...{\n      \"id\": \"singledatereducer\"\n    }}>{`singleDateReducer`}</h3>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`import { singleDateReducer, calendarActions } from \"@use-date-input/core\";\n`}</code></pre>\n    <p>{`When combined with the `}<inlineCode parentName=\"p\">{`singleDateReducer`}</inlineCode>{` it selects single dates.  `}</p>\n    <p>{`Associated actions :  `}</p>\n    <ul>\n      <li parentName=\"ul\">{`Uses the `}<inlineCode parentName=\"li\">{`calendarReducer`}</inlineCode>{` actions`}</li>\n    </ul>\n    <h3 {...{\n      \"id\": \"daterangereducer\"\n    }}>{`dateRangeReducer`}</h3>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`import { dateRangeReducer, calendarActions } from \"@use-date-input/core\";\n`}</code></pre>\n    <p>{`When combined with the `}<inlineCode parentName=\"p\">{`calendarReducer`}</inlineCode>{` it selects a date range.   `}</p>\n    <p>{`Associated actions :  `}</p>\n    <ul>\n      <li parentName=\"ul\">{`Uses the `}<inlineCode parentName=\"li\">{`calendarReducer`}</inlineCode>{` actions`}</li>\n    </ul>\n    <h3 {...{\n      \"id\": \"dateinputreducer\"\n    }}>{`dateInputReducer`}</h3>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`import { dateInputReducer, dateInputActions } from \"@use-date-input/core\";\n`}</code></pre>\n    <p>{`Combines with `}<inlineCode parentName=\"p\">{`calendarReducer`}</inlineCode>{` to select a single date from either the `}<inlineCode parentName=\"p\">{`Calendar`}</inlineCode>{` or an input.`}</p>\n    <p>{`Associated actions :  `}</p>\n    <ul>\n      <li parentName=\"ul\">{`blurInput : Blur the associated input's focus`}</li>\n      <li parentName=\"ul\">{`focusInput : Focus the associated input`}</li>\n      <li parentName=\"ul\">{`focusLock : Enable/Disable the focus lock, so that tabbing behaviour links both input and `}<inlineCode parentName=\"li\">{`Calendar`}</inlineCode></li>\n    </ul>\n    <h3 {...{\n      \"id\": \"daterangeinputreducer\"\n    }}>{`dateRangeInputReducer`}</h3>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`import { dateRangeInputReducer, dateRangeInputActions, dateRangeInputType } from \"@use-date-input/core\";\n`}</code></pre>\n    <p>{`Combines with `}<inlineCode parentName=\"p\">{`calendarReducer`}</inlineCode>{` to select a date range from either the `}<inlineCode parentName=\"p\">{`Calendar`}</inlineCode>{` or 2 inputs, representing the start and end date.  `}</p>\n    <p>{`Associated actions :  `}</p>\n    <ul>\n      <li parentName=\"ul\">{`blurStartDate : Blur the associated input's focus`}</li>\n      <li parentName=\"ul\">{`blurEndDate : Blur the associated input's focus`}</li>\n      <li parentName=\"ul\">{`focusStartDate : Focus the associated input`}</li>\n      <li parentName=\"ul\">{`focusEndDate : Focus the associated input`}</li>\n      <li parentName=\"ul\">{`focusLock : Enable/Disable the focus lock, so that tabbing behaviour links both input and `}<inlineCode parentName=\"li\">{`Calendar`}</inlineCode></li>\n    </ul>\n    <h2 {...{\n      \"id\": \"reading-state\"\n    }}>{`Reading State`}</h2>\n    <p>{`Providing an `}<inlineCode parentName=\"p\">{`onStateChange`}</inlineCode>{` callback to the `}<inlineCode parentName=\"p\">{`CalendarProvider`}</inlineCode>{` enables you to respond to state change.`}</p>\n    <p>{`In this example, `}<inlineCode parentName=\"p\">{`state`}</inlineCode>{` and `}<inlineCode parentName=\"p\">{`changes`}</inlineCode>{` are logged to the console.`}</p>\n    <Playground __position={1} __code={'() => {\\n  // import { Calendar } from \\\"@use-date-input/core\\\";\\n  // import { adapter as dateAdapter } from \\\"@use-date-input/date-fns-adapter\\\";\\n  function handleStateChange(newState, changes) {\\n    console.log(\\'new state\\', newState, changes)\\n  }\\n  return <Calendar adapter={dateAdapter} onStateChange={handleStateChange} />\\n}'} __scope={{\n      props,\n      DefaultLayout,\n      useRef,\n      useState,\n      useDocs,\n      Link,\n      Playground,\n      styled,\n      calendarActions,\n      calendarReducer,\n      createDateAPI,\n      Calendar,\n      CalendarProvider,\n      Day,\n      useCalendarDispatch,\n      useCalendarState,\n      singleDateReducer,\n      Root,\n      makeStyles,\n      List,\n      ListItem,\n      ListItemText,\n      dateAdapter,\n      getDay,\n      eachDayOfInterval,\n      sampleTheme,\n      DefaultLayout,\n      _frontmatter\n    }} mdxType=\"Playground\">\n      {() => {\n        // import { Calendar } from \"@use-date-input/core\";\n        // import { adapter as dateAdapter } from \"@use-date-input/date-fns-adapter\";\n        function handleStateChange(newState, changes) {\n          console.log('new state', newState, changes);\n        }\n\n        return <Calendar adapter={dateAdapter} onStateChange={handleStateChange} mdxType=\"Calendar\" />;\n      }}\n    </Playground>\n    <h2 {...{\n      \"id\": \"changing-state\"\n    }}>{`Changing State`}</h2>\n    <p>{`In addition to the reducers, state can be modified via the `}<inlineCode parentName=\"p\">{`useCalendarDispatch`}</inlineCode>{` hook or an `}<inlineCode parentName=\"p\">{`actions`}</inlineCode>{` ref.`}</p>\n    <h3 {...{\n      \"id\": \"usecalendardispatch\"\n    }}>{`useCalendarDispatch`}</h3>\n    <p>{`Actions can be dispatched via an API returned by the `}<inlineCode parentName=\"p\">{`useCalendarDispatch`}</inlineCode>{` hook.  `}</p>\n    <p><inlineCode parentName=\"p\">{`useCalendarDispatch`}</inlineCode>{` can be used in any child of `}<inlineCode parentName=\"p\">{`CalendarProvider`}</inlineCode>{`.  `}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`const {\n    dispatch,\n    mouseClickOutside,\n    navigateNext,\n    navigatePrevious,\n    selectDate,\n    setAnimating,\n    setEnableKeyboardNavigation,\n    setKeyboardCursor,\n    setMouseCursor,\n    setEndDate,\n    setStartDate,\n    setOpen,\n    setKeyPress,\n    setVisibleFromDate\n} = useCalendarDispatch();\n`}</code></pre>\n    <p>{`Use `}<inlineCode parentName=\"p\">{`dispatch`}</inlineCode>{` or use the helper functions, which wrap the dispatch method, they are equivalent.  `}</p>\n    <p>{`Refer to the `}<a parentName=\"p\" {...{\n        \"href\": \"https://mark-tate.github.io/use-date-input/useCalendarDispatch\"\n      }}>{`useCalendarDispatch`}</a>{` docs for examples.`}</p>\n    <h3 {...{\n      \"id\": \"actions-ref\"\n    }}>{`Actions Ref`}</h3>\n    <p>{`Providing an `}<inlineCode parentName=\"p\">{`actions`}</inlineCode>{` ref to the `}<inlineCode parentName=\"p\">{`CalendarProvider`}</inlineCode>{` enables you to control the Component state externally using either the helper functions or the dispatcher itself.`}</p>\n    <p>{`The ref will be assigned the `}<inlineCode parentName=\"p\">{`useCalendarDispatch`}</inlineCode>{` API that enables you to modify the state.`}</p>\n    <p>{`An `}<inlineCode parentName=\"p\">{`actions`}</inlineCode>{` ref can be used anywhere, even outside the `}<inlineCode parentName=\"p\">{`CalendarProvider`}</inlineCode>{` hierachy and unlike the hook `}<inlineCode parentName=\"p\">{`useCalendarDispatch`}</inlineCode>{` can be called, as and when needed.  `}</p>\n    <p>{`In this example, the date range is created by setting the endDate, upon selection of the start date. `}</p>\n    <Playground __position={2} __code={'() => {\\n  // import { useRef, useState } from \\\"react\\\";\\n  // import { Calendar, CalendarProvider } from \\\"@use-date-input/core\\\";\\n  // imprt dateAdapter from \\\"@use-date-input/date-fns-adapter\\\";\\n  const [storeDate, setStoreDate] = useState()\\n  const actions = useRef()\\n  function handleCalendarChange(value) {\\n    const [rangeStart, rangeEnd] = value\\n    const { setStartDate, setEndDate, dateAPI } = actions.current\\n    if (!dateAPI.isSameDay(storeDate, rangeStart)) {\\n      const endDate = dateAPI.addWeeks(rangeStart, 1)\\n      setEndDate(endDate)\\n      setStoreDate(rangeStart)\\n    }\\n  }\\n  return (\\n    <CalendarProvider\\n      actions={actions}\\n      adapter={dateAdapter}\\n      allowRange\\n      onCalendarChange={handleCalendarChange}\\n    >\\n      <Calendar />\\n    </CalendarProvider>\\n  )\\n}'} __scope={{\n      props,\n      DefaultLayout,\n      useRef,\n      useState,\n      useDocs,\n      Link,\n      Playground,\n      styled,\n      calendarActions,\n      calendarReducer,\n      createDateAPI,\n      Calendar,\n      CalendarProvider,\n      Day,\n      useCalendarDispatch,\n      useCalendarState,\n      singleDateReducer,\n      Root,\n      makeStyles,\n      List,\n      ListItem,\n      ListItemText,\n      dateAdapter,\n      getDay,\n      eachDayOfInterval,\n      sampleTheme,\n      DefaultLayout,\n      _frontmatter\n    }} mdxType=\"Playground\">\n      {() => {\n        // import { useRef, useState } from \"react\";\n        // import { Calendar, CalendarProvider } from \"@use-date-input/core\";\n        // imprt dateAdapter from \"@use-date-input/date-fns-adapter\";\n        const [storeDate, setStoreDate] = useState();\n        const actions = useRef();\n\n        function handleCalendarChange(value) {\n          const [rangeStart, rangeEnd] = value;\n          const {\n            setStartDate,\n            setEndDate,\n            dateAPI\n          } = actions.current;\n\n          if (!dateAPI.isSameDay(storeDate, rangeStart)) {\n            const endDate = dateAPI.addWeeks(rangeStart, 1);\n            setEndDate(endDate);\n            setStoreDate(rangeStart);\n          }\n        }\n\n        return <CalendarProvider actions={actions} adapter={dateAdapter} allowRange onCalendarChange={handleCalendarChange} mdxType=\"CalendarProvider\">\n            <Calendar mdxType=\"Calendar\" />\n        </CalendarProvider>;\n      }}\n    </Playground>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"sourceRoot":""}